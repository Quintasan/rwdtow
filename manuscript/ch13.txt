# SQL

One of the biggest pluses of Active Record (that provides Rails) is that developer does not need to write raw SQL queries to make basic data manipulation in DB. And like everything in a nature abilities that are not in use are to go away completely. In that way, we have a bunch of Rails developers that are scared of anything more complex than `SELECT * FROM users`. That is pretty depressing.

* Learn SQL and particular Databases capabilities!
* In case you use Rails look into Console and try to understand what SQL is composed as a result of given AR query syntax
* Don't start from the "simplest" AR code, that makes a lot of unneeded queries, N+1 queries etc. Think about any data query beforehand. Think in SQL!
* In case you use Rails, use the power of AR query composition, that's fine. You do not need to write raw SQL all the time. But when you need to compose the complex query and do not know how to do it with AR - the first step do it in SQL, and then gradually transform it into AR notation.
* Some queries (especially those using special abilities of DB, like `PARTITION BY` etc.) better to leave in raw SQL. Think about other developers who will need to support this code. Some things would be clearer in AR notation, some - in pure SQL. Just consider options.   

Also, consider that different databases are best suitable for different cases. One web application can make use of a few database simultaneously. Think about data type you want to operate. You can even combine relational DB (PostgreSQL, MySQL) with document oriented DB (MongoDB). For graph like data ("friends of my friends" relations) there is own class of DBses like Neo4J. There are even multiparadigm DB like ArangoDB.

You should also keep an eye on DB world. It is changing as fast as web languages and frameworks. And it is up to web developer to propose and to use the best data storage according to data type and common query patterns.


* [Khan Academy. Intro to SQL: Querying and managing data](https://www.khanacademy.org/computing/computer-programming/sql)
* [PostgreSQL Tutorials](http://www.postgresqltutorial.com/)
* [PostgreSQL Exercises](https://www.pgexercises.com/)
* [PostgreSQL](http://www.postgresql.org/)
* [MongoDB](https://www.mongodb.org/)
* [Neo4J](http://neo4j.com/)
* [ArangoDB](https://www.arangodb.com/)